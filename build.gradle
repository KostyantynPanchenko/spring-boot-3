plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    //For Tracing Context Propagation with Micrometer Tracing, we need to pick a tracer bridge
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    //For Micrometer metrics with Prometheus, we need
    implementation 'io.micrometer:micrometer-registry-prometheus'
    //For Latency Visualization, we need to send the finished Zipkin-compliant span to a server
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
    //To ship the logs to Grafana Loki, we need
    implementation 'com.github.loki4j:loki-logback-appender:1.3.2'
    //To instrument JDBC, we need
    implementation 'net.ttddyy.observation:datasource-micrometer-spring-boot:1.0.1'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
